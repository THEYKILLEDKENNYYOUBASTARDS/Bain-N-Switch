import pygame
import math
from pygame import transform, image
from random import randint

# Initialize pygame
pygame.init()

# Game constants
fps = 60
WIDTH = 900
HEIGHT = 800
screen = pygame.display.set_mode([WIDTH, HEIGHT])
clock = pygame.time.Clock()

# Load images
try:
    bgs = transform.scale(image.load('bg.jpg'), (900, 800))
    banners = transform.scale(image.load('meter.png'), (100, 700))
    guns = transform.scale(image.load('aim.png'), (100, 100))
    # Assuming you have enemy images named enemy1.png, enemy2.png, enemy3.png
    target_images = [
        transform.scale(image.load('enemy.png'), (120, 80)),  # Level 1 enemy
        transform.scale(image.load('enemy.png'), (102, 68)),   # Level 2 enemy (smaller)
        transform.scale(image.load('enemy.png'), (84, 56))     # Level 3 enemy (smallest)
    ]
except pygame.error as e:
    print(f"Error loading images: {e}")
    pygame.quit()
    exit()

# Game settings
targets = {
    1: [10, 5, 3],  # Level 1 target counts
    2: [12, 8, 5],  # Level 2 target counts
    3: [15, 12, 8, 3]  # Level 3 target counts
}

level = 1

# Initialize enemy coordinates
def init_coords():
    one_coords = [[], [], []]
    two_coords = [[], [], []]
    three_coords = [[], [], [], []]
    
    # Level 1 coordinates
    for i in range(3):
        my_list = targets[1]
        for j in range(my_list[i]):
            one_coords[i].append((WIDTH // (my_list[i] + 1) * (j + 1), 300 - (i * 150) + 30 * (j % 2)))
    
    # Level 2 coordinates
    for i in range(3):
        my_list = targets[2]
        for j in range(my_list[i]):
            two_coords[i].append((WIDTH // (my_list[i] + 1) * (j + 1), 300 - (i * 150) + 30 * (j % 2)))
    
    # Level 3 coordinates
    for i in range(4):
        my_list = targets[3]
        for j in range(my_list[i]):
            three_coords[i].append((WIDTH // (my_list[i] + 1) * (j + 1), 300 - (i * 100) + 30 * (j % 2)))
    
    return one_coords, two_coords, three_coords

one_coords, two_coords, three_coords = init_coords()

def draw_gun():
    mouse_pos = pygame.mouse.get_pos()
    gun_point = (WIDTH / 2, HEIGHT - 200)
    lasers = ['red', 'purple', 'green']
    clicks = pygame.mouse.get_pressed()
    
    if mouse_pos[0] != gun_point[0]:
        slope = (mouse_pos[1] - gun_point[1]) / (mouse_pos[0] - gun_point[0])
    else:
        slope = -100000
    
    angle = math.atan(slope)
    rotation = math.degrees(angle)
    
    if mouse_pos[0] < WIDTH / 2:
        gun = pygame.transform.flip(guns, True, False)
        if mouse_pos[1] < 600:
            screen.blit(pygame.transform.rotate(gun, 90 - rotation), (WIDTH / 2 - 90, HEIGHT - 250))
            if clicks[0]:
                pygame.draw.circle(screen, lasers[level - 1], mouse_pos, 5)
    else:
        gun = guns
        if mouse_pos[1] < 600:
            screen.blit(pygame.transform.rotate(gun, 270 - rotation), (WIDTH / 2 - 30, HEIGHT - 250))
            if clicks[0]:
                pygame.draw.circle(screen, lasers[level - 1], mouse_pos, 5)

def draw_level(coords):
    if level == 1 or level == 2:
        target_rects = [[], [], []]
    else:
        target_rects = [[], [], [], []]
    
    for i in range(len(coords)):
        for j in range(len(coords[i])):
            # Adjust target size based on level
            target_size = 60 - i * 12
            target_rects[i].append(pygame.Rect((coords[i][j][0], coords[i][j][1]), 
                                             (target_size, target_size)))
            # Draw the appropriate target image for the level
            screen.blit(target_images[level - 1], coords[i][j])
    
    return target_rects

run = True
while run:
    clock.tick(fps)
    
    # Event handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_1:
                level = 1
            elif event.key == pygame.K_2:
                level = 2
            elif event.key == pygame.K_3:
                level = 3
    
    # Drawing
    screen.fill('black')
    screen.blit(bgs, (0, 0))
    screen.blit(banners, (0, HEIGHT - 200))
    
    if level == 1:
        target_boxes = draw_level(one_coords)
    elif level == 2:
        target_boxes = draw_level(two_coords)
    elif level == 3:
        target_boxes = draw_level(three_coords)
    
    if level > 0:
        draw_gun()
    
    pygame.display.flip()

pygame.quit()
